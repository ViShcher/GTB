from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlmodel import select

from config import settings
from db import get_session, User

profile_router = Router()

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) =====
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), KeyboardButton(text="‚≠ê –ü—Ä–µ—Å–µ—Ç—ã")],
            [KeyboardButton(text="üìö –ü—Ä–æ–≥—Ä–∞–º–º—ã"), KeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
    )

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ =====
class Onb(StatesGroup):
    goal = State()
    gender = State()
    weight = State()
    height = State()
    age = State()
    confirm = State()

# ===== –í—Å–ø–æ–º–æ–≥. –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def goals_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal:lose_weight")],
        [InlineKeyboardButton(text="üí™ –ú–∞—Å—Å–∞", callback_data="goal:gain_muscle")],
        [InlineKeyboardButton(text="ü¶¥ –ó–¥–æ—Ä–æ–≤—å–µ —Å–ø–∏–Ω—ã", callback_data="goal:health")],
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="goal:none")],
    ])

def gender_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂", callback_data="gender:male"),
         InlineKeyboardButton(text="–ñ–µ–Ω", callback_data="gender:female")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="gender:other")],
    ])

def stepper_kb(prefix: str, value: float, steps: list[float], unit: str, done: bool) -> InlineKeyboardMarkup:
    row_minus = [InlineKeyboardButton(text=f"‚àí{s}", callback_data=f"{prefix}:dec:{s}") for s in steps if s > 0]
    row_plus = [InlineKeyboardButton(text=f"+{s}", callback_data=f"{prefix}:inc:{s}") for s in steps if s > 0]
    rows = [row_minus, row_plus]
    if done:
        rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}:ok")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm:yes"),
         InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm:edit")],
    ])

# ===== /start =====
@profile_router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    # ReplyKeyboardRemove –Ω–µ –Ω—É–∂–µ–Ω: –º—ã —É–∂–µ —á–∏—Å—Ç–∏–º –º–µ–Ω—é –≤ server.py
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == msg.from_user.id))
        user = res.first()

        if user:
            await msg.answer("–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())
            return

        # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        user = User(tg_id=msg.from_user.id)
        session.add(user)
        await session.commit()

    await msg.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=goals_kb())
    await state.set_state(Onb.goal)

# ===== –í—ã–±–æ—Ä —Ü–µ–ª–∏ =====
@profile_router.callback_query(F.data.startswith("goal:"), Onb.goal)
async def pick_goal(cb: CallbackQuery, state: FSMContext):
    goal = cb.data.split(":", 1)[1]
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
        user.goal = goal
        await session.commit()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_kb())
    await state.set_state(Onb.gender)
    await cb.answer()

# ===== –ü–æ–ª =====
@profile_router.callback_query(F.data.startswith("gender:"), Onb.gender)
async def pick_gender(cb: CallbackQuery, state: FSMContext):
    gender = cb.data.split(":", 1)[1]
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
        user.gender = gender
        await session.commit()
    # –≤–µ—Å: —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 70.0
    await state.update_data(weight=70.0)
    await cb.message.edit_text(
        f"–í–µ—Å: 70.0 –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("w", 70.0, [0.5, 1, 2.5, 5], "–∫–≥", True),
    )
    await state.set_state(Onb.weight)
    await cb.answer()

# ===== –í–µ—Å: –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã =====
@profile_router.callback_query(F.data.startswith("w:"), Onb.weight)
async def weight_step(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    w = float(data.get("weight", 70.0))

    parts = cb.data.split(":", maxsplit=2)  # –Ω–∞–ø—Ä–∏–º–µ—Ä: ["w","inc","2.5"] –∏–ª–∏ ["w","ok"]
    action = parts[1]

    if action == "inc":
        step = float(parts[2])
        w += step
        await state.update_data(weight=round(w, 1))
        await cb.message.edit_text(
            f"–í–µ—Å: {round(w,1)} –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("w", w, [0.5, 1, 2.5, 5], "–∫–≥", True),
        )
        await cb.answer()
        return

    if action == "dec":
        step = float(parts[2])
        w = max(1.0, w - step)
        await state.update_data(weight=round(w, 1))
        await cb.message.edit_text(
            f"–í–µ—Å: {round(w,1)} –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("w", w, [0.5, 1, 2.5, 5], "–∫–≥", True),
        )
        await cb.answer()
        return

    if action == "ok":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–æ—Å—Ç—É
        async with await get_session(settings.database_url) as session:
            res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
            user = res.first()
            user.weight_kg = round(w, 1)
            await session.commit()

        await state.update_data(height=175)
        await cb.message.edit_text(
            f"–†–æ—Å—Ç: 175 —Å–º\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("h", 175, [1, 2, 5], "—Å–º", True),
        )
        await state.set_state(Onb.height)
        await cb.answer()
        return

    await state.update_data(weight=round(w, 1))
    await cb.message.edit_text(
        f"–í–µ—Å: {round(w,1)} –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("w", w, [0.5, 1, 2.5, 5], "–∫–≥", True),
    )
    await cb.answer()

# ===== –†–æ—Å—Ç =====
@profile_router.callback_query(F.data.startswith("h:"), Onb.height)
async def height_step(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    h = int(data.get("height", 175))

    parts = cb.data.split(":", maxsplit=2)  # ["h","inc","2"] –∏–ª–∏ ["h","ok"]
    action = parts[1]

    if action == "inc":
        step = int(float(parts[2]))
        h = min(230, h + step)
        await state.update_data(height=h)
        await cb.message.edit_text(
            f"–†–æ—Å—Ç: {h} —Å–º\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("h", h, [1, 2, 5], "—Å–º", True),
        )
        await cb.answer()
        return

    if action == "dec":
        step = int(float(parts[2]))
        h = max(120, h - step)
        await state.update_data(height=h)
        await cb.message.edit_text(
            f"–†–æ—Å—Ç: {h} —Å–º\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("h", h, [1, 2, 5], "—Å–º", True),
        )
        await cb.answer()
        return

    if action == "ok":
        async with await get_session(settings.database_url) as session:
            res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
            user = res.first()
            user.height_cm = h
            await session.commit()

        await state.update_data(age=25)
        await cb.message.edit_text(
            f"–í–æ–∑—Ä–∞—Å—Ç: 25 –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("a", 25, [1, 2, 5], "–ª–µ—Ç", True),
        )
        await state.set_state(Onb.age)
        await cb.answer()
        return

# ===== –í–æ–∑—Ä–∞—Å—Ç =====
@profile_router.callback_query(F.data.startswith("a:"), Onb.age)
async def age_step(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    a = int(data.get("age", 25))

    parts = cb.data.split(":", maxsplit=2)  # ["a","inc","2"] –∏–ª–∏ ["a","ok"]
    action = parts[1]

    if action == "inc":
        step = int(float(parts[2]))
        a = min(100, a + step)
        await state.update_data(age=a)
        await cb.message.edit_text(
            f"–í–æ–∑—Ä–∞—Å—Ç: {a} –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("a", a, [1, 2, 5], "–ª–µ—Ç", True),
        )
        await cb.answer()
        return

    if action == "dec":
        step = int(float(parts[2]))
        a = max(10, a - step)
        await state.update_data(age=a)
        await cb.message.edit_text(
            f"–í–æ–∑—Ä–∞—Å—Ç: {a} –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("a", a, [1, 2, 5], "–ª–µ—Ç", True),
        )
        await cb.answer()
        return

    if action == "ok":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        async with await get_session(settings.database_url) as session:
            res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
            user = res.first()
            user.age = a
            await session.commit()

        # –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
        async with await get_session(settings.database_url) as session:
            res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
            user = res.first()
        goal_map = {
            "lose_weight": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
            "gain_muscle": "–ú–∞—Å—Å–∞",
            "health": "–ó–¥–æ—Ä–æ–≤—å–µ",
            "none": "–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
            None: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
        }
        gender_map = {"male": "–ú—É–∂", "female": "–ñ–µ–Ω", "other": "–î—Ä—É–≥–æ–µ", None: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
        text = (
            "–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n"
            f"–¶–µ–ª—å: {goal_map.get(user.goal)}\n"
            f"–ü–æ–ª: {gender_map.get(user.gender)}\n"
            f"–í–µ—Å: {user.weight_kg} –∫–≥\n"
            f"–†–æ—Å—Ç: {user.height_cm} —Å–º\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
        )
        await cb.message.edit_text(text, reply_markup=confirm_kb())
        await state.set_state(Onb.confirm)
        await cb.answer()
        return

    await state.update_data(age=a)
    await cb.message.edit_text(
        f"–í–æ–∑—Ä–∞—Å—Ç: {a} –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("a", a, [1, 2, 5], "–ª–µ—Ç", True),
    )
    await cb.answer()

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ =====
@profile_router.callback_query(F.data == "confirm:yes", Onb.confirm)
async def confirm_yes(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–û—Ç–ª–∏—á–Ω–æ. –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ.")
    await cb.message.answer("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())
    await cb.answer()

@profile_router.callback_query(F.data == "confirm:edit", Onb.confirm)
async def confirm_edit(cb: CallbackQuery, state: FSMContext):
    # –ù–∞—á–Ω—ë–º –ø—Ä–∞–≤–∫—É —Å –≤–µ—Å–∞
    await state.update_data(weight=70.0)
    await cb.message.edit_text(
        f"–í–µ—Å: 70.0 –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("w", 70.0, [0.5, 1, 2.5, 5], "–∫–≥", True),
    )
    await state.set_state(Onb.weight)
    await cb.answer()

# ===== –ü—Ä–æ—Ñ–∏–ª—å/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====
@profile_router.message(Command("my_profile"))
@profile_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_profile(msg: Message):
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == msg.from_user.id))
        user = res.first()

    if not user:
        await msg.answer("–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥. –ù–∞–∂–º–∏ /start.")
        return

    goal_map = {
        "lose_weight": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "gain_muscle": "–ú–∞—Å—Å–∞",
        "health": "–ó–¥–æ—Ä–æ–≤—å–µ", "none": "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
    }
    gender_map = {"male": "–ú—É–∂", "female": "–ñ–µ–Ω", "other": "–î—Ä—É–≥–æ–µ", None: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

    text = (
        "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–¶–µ–ª—å: {goal_map.get(user.goal)}\n"
        f"–ü–æ–ª: {gender_map.get(user.gender)}\n"
        f"–í–µ—Å: {user.weight_kg} –∫–≥\n"
        f"–†–æ—Å—Ç: {user.height_cm} —Å–º\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏ /start –∏ –ø—Ä–æ–π–¥–∏ –º–∏–Ω–∏-–º–∞—Å—Ç–µ—Ä –µ—â—ë —Ä–∞–∑."
    )
    await msg.answer(text, reply_markup=main_menu())
