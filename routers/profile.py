from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlmodel import select

from config import settings
from db import get_session, User

profile_router = Router()

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard) =====
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), KeyboardButton(text="üö¥ –ö–∞—Ä–¥–∏–æ")],
            [KeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
    )

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ =====
class Onb(StatesGroup):
    goal = State()
    gender = State()
    weight = State()
    height = State()
    age = State()
    confirm = State()

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è =====
class Edit(StatesGroup):
    goal = State()
    gender = State()
    weight = State()
    height = State()
    age = State()

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def goals_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal:lose_weight")],
        [InlineKeyboardButton(text="üí™ –ú–∞—Å—Å–∞", callback_data="goal:gain_muscle")],
        [InlineKeyboardButton(text="ü¶¥ –ó–¥–æ—Ä–æ–≤—å–µ —Å–ø–∏–Ω—ã", callback_data="goal:health")],
        [InlineKeyboardButton(text="–ù–µ –≤—ã–±—Ä–∞–Ω–æ", callback_data="goal:none")],
    ])

def gender_kb() -> InlineKeyboardMarkup:
    # –ü–æ –∑–∞–¥–∞—á–µ: —Ç–æ–ª—å–∫–æ –ú—É–∂ / –ñ–µ–Ω
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂", callback_data="gender:male"),
         InlineKeyboardButton(text="–ñ–µ–Ω", callback_data="gender:female")],
    ])

def stepper_kb(prefix: str, value: float, steps: list[float], unit: str, done: bool, with_back: bool = False) -> InlineKeyboardMarkup:
    row_minus = [InlineKeyboardButton(text=f"‚àí{s}", callback_data=f"{prefix}:dec:{s}") for s in steps if s > 0]
    row_plus = [InlineKeyboardButton(text=f"+{s}", callback_data=f"{prefix}:inc:{s}") for s in steps if s > 0]
    rows = [row_minus, row_plus]
    if done:
        rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"{prefix}:ok")])
    if with_back:
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:profile")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm:yes"),
         InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm:edit")],
    ])

def settings_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="settings:profile")],
    ])

def profile_edit_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –¶–µ–ª—å", callback_data="edit:goal"),
         InlineKeyboardButton(text="üöª –ü–æ–ª", callback_data="edit:gender")],
        [InlineKeyboardButton(text="‚öñÔ∏è –í–µ—Å", callback_data="edit:weight"),
         InlineKeyboardButton(text="üìè –†–æ—Å—Ç", callback_data="edit:height")],
        [InlineKeyboardButton(text="üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit:age")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings:menu")],
    ])

# ===== /start =====
@profile_router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == msg.from_user.id))
        user = res.first()

        if user:
            await msg.answer("–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())
            return

        user = User(tg_id=msg.from_user.id)
        session.add(user)
        await session.commit()

    await msg.answer("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=goals_kb())
    await state.set_state(Onb.goal)

# ===== –í—ã–±–æ—Ä —Ü–µ–ª–∏ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥) =====
@profile_router.callback_query(F.data.startswith("goal:"), Onb.goal)
async def pick_goal(cb: CallbackQuery, state: FSMContext):
    goal = cb.data.split(":", 1)[1]
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
        user.goal = goal
        await session.commit()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_kb())
    await state.set_state(Onb.gender)
    await cb.answer()

# ===== –ü–æ–ª (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥) =====
@profile_router.callback_query(F.data.startswith("gender:"), Onb.gender)
async def pick_gender(cb: CallbackQuery, state: FSMContext):
    gender = cb.data.split(":", 1)[1]
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
        user.gender = gender
        await session.commit()
    await state.update_data(weight=70.0)
    await cb.message.edit_text(
        f"–í–µ—Å: 70.0 –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("w", 70.0, [0.5, 1, 2.5, 5], "–∫–≥", True),
    )
    await state.set_state(Onb.weight)
    await cb.answer()

# ===== –í–µ—Å: –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç—ã (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) =====
@profile_router.callback_query(F.data.startswith("w:"), Onb.weight)
@profile_router.callback_query(F.data.startswith("w:"), Edit.weight)
async def weight_step(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    w = float(data.get("weight", 70.0))

    parts = cb.data.split(":", maxsplit=2)  # ["w","inc","2.5"] | ["w","ok"]
    action = parts[1]

    def render(val: float, with_back: bool) -> InlineKeyboardMarkup:
        return stepper_kb("w", val, [0.5, 1, 2.5, 5], "–∫–≥", True, with_back=with_back)

    # –≥–¥–µ –º—ã: –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    cur_state = await state.get_state()
    in_edit = cur_state and cur_state.startswith(Edit.__name__)

    if action == "inc":
        step = float(parts[2])
        w = min(300.0, round(w + step, 1))
        await state.update_data(weight=w)
        await cb.message.edit_text(
            f"–í–µ—Å: {w:.1f} –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=render(w, with_back=in_edit),
        )
        await cb.answer()
        return

    if action == "dec":
        step = float(parts[2])
        w = max(30.0, round(w - step, 1))
        await state.update_data(weight=w)
        await cb.message.edit_text(
            f"–í–µ—Å: {w:.1f} –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=render(w, with_back=in_edit),
        )
        await cb.answer()
        return

    if action == "ok":
        async with await get_session(settings.database_url) as session:
            res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
            user = res.first()
            user.weight_kg = round(w, 1)
            await session.commit()

        if in_edit:
            await cb.message.edit_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –í–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω.")
            # –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            await show_profile_card(cb.message)
            await state.clear()
        else:
            await state.update_data(height=175)
            await cb.message.edit_text(
                f"–†–æ—Å—Ç: 175 —Å–º\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                reply_markup=stepper_kb("h", 175, [1, 2, 5], "—Å–º", True),
            )
            await state.set_state(Onb.height)
        await cb.answer()
        return

# ===== –†–æ—Å—Ç (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) =====
@profile_router.callback_query(F.data.startswith("h:"), Onb.height)
@profile_router.callback_query(F.data.startswith("h:"), Edit.height)
async def height_step(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    h = int(data.get("height", 175))

    parts = cb.data.split(":", maxsplit=2)  # ["h","inc","2"] | ["h","ok"]
    action = parts[1]

    cur_state = await state.get_state()
    in_edit = cur_state and cur_state.startswith(Edit.__name__)

    if action == "inc":
        step = int(float(parts[2]))
        h = min(230, h + step)
        await state.update_data(height=h)
        await cb.message.edit_text(
            f"–†–æ—Å—Ç: {h} —Å–º\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("h", h, [1, 2, 5], "—Å–º", True, with_back=in_edit),
        )
        await cb.answer()
        return

    if action == "dec":
        step = int(float(parts[2]))
        h = max(120, h - step)
        await state.update_data(height=h)
        await cb.message.edit_text(
            f"–†–æ—Å—Ç: {h} —Å–º\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("h", h, [1, 2, 5], "—Å–º", True, with_back=in_edit),
        )
        await cb.answer()
        return

    if action == "ok":
        async with await get_session(settings.database_url) as session:
            res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
            user = res.first()
            user.height_cm = h
            await session.commit()

        if in_edit:
            await cb.message.edit_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –†–æ—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
            await show_profile_card(cb.message)
            await state.clear()
        else:
            await state.update_data(age=25)
            await cb.message.edit_text(
                f"–í–æ–∑—Ä–∞—Å—Ç: 25 –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
                reply_markup=stepper_kb("a", 25, [1, 2, 5], "–ª–µ—Ç", True),
            )
            await state.set_state(Onb.age)
        await cb.answer()
        return

# ===== –í–æ–∑—Ä–∞—Å—Ç (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) =====
@profile_router.callback_query(F.data.startswith("a:"), Onb.age)
@profile_router.callback_query(F.data.startswith("a:"), Edit.age)
async def age_step(cb: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    a = int(data.get("age", 25))

    parts = cb.data.split(":", maxsplit=2)  # ["a","inc","2"] | ["a","ok"]
    action = parts[1]

    cur_state = await state.get_state()
    in_edit = cur_state and cur_state.startswith(Edit.__name__)

    if action == "inc":
        step = int(float(parts[2]))
        a = min(100, a + step)
        await state.update_data(age=a)
        await cb.message.edit_text(
            f"–í–æ–∑—Ä–∞—Å—Ç: {a} –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("a", a, [1, 2, 5], "–ª–µ—Ç", True, with_back=in_edit),
        )
        await cb.answer()
        return

    if action == "dec":
        step = int(float(parts[2]))
        a = max(10, a - step)
        await state.update_data(age=a)
        await cb.message.edit_text(
            f"–í–æ–∑—Ä–∞—Å—Ç: {a} –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=stepper_kb("a", a, [1, 2, 5], "–ª–µ—Ç", True, with_back=in_edit),
        )
        await cb.answer()
        return

    if action == "ok":
        async with await get_session(settings.database_url) as session:
            res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
            user = res.first()
            user.age = a
            await session.commit()

        if in_edit:
            await cb.message.edit_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
            await show_profile_card(cb.message)
            await state.clear()
        else:
            # –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É
            async with await get_session(settings.database_url) as session:
                res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
                user = res.first()
            goal_map = {
                "lose_weight": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
                "gain_muscle": "–ú–∞—Å—Å–∞",
                "health": "–ó–¥–æ—Ä–æ–≤—å–µ",
                "none": "–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
                None: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
            }
            gender_map = {"male": "–ú—É–∂", "female": "–ñ–µ–Ω", None: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
            text = (
                "–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n"
                f"–¶–µ–ª—å: {goal_map.get(user.goal)}\n"
                f"–ü–æ–ª: {gender_map.get(user.gender)}\n"
                f"–í–µ—Å: {user.weight_kg} –∫–≥\n"
                f"–†–æ—Å—Ç: {user.height_cm} —Å–º\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
            )
            await cb.message.edit_text(text, reply_markup=confirm_kb())
            await state.set_state(Onb.confirm)
        await cb.answer()
        return

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥) =====
@profile_router.callback_query(F.data == "confirm:yes", Onb.confirm)
async def confirm_yes(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–û—Ç–ª–∏—á–Ω–æ. –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ.")
    await cb.message.answer("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_menu())
    await cb.answer()

@profile_router.callback_query(F.data == "confirm:edit", Onb.confirm)
async def confirm_edit(cb: CallbackQuery, state: FSMContext):
    await state.update_data(weight=70.0)
    await cb.message.edit_text(
        f"–í–µ—Å: 70.0 –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("w", 70.0, [0.5, 1, 2.5, 5], "–∫–≥", True),
    )
    await state.set_state(Onb.weight)
    await cb.answer()

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
@profile_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def open_settings(msg: Message):
    await msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu_kb())

@profile_router.callback_query(F.data == "settings:menu")
async def open_settings_cb(cb: CallbackQuery):
    await cb.answer()
    await cb.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_menu_kb())

# ===== –ü—Ä–æ—Ñ–∏–ª—å (–∫–∞—Ä—Ç–æ—á–∫–∞ + —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) =====
async def show_profile_card(where: Message | CallbackQuery):
    # where ‚Äî –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è; –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º cb.message
    msg = where if isinstance(where, Message) else where  # —Ç–∏–ø-—Ö–∏–Ω—Ç —É–ø—Ä–æ—â—ë–Ω
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == (getattr(where, "from_user", None) or getattr(where, "chat", None)).id))
        user = res.first()
    if not user:
        if isinstance(where, Message):
            await where.answer("–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥. –ù–∞–∂–º–∏ /start.")
        else:
            await where.answer("–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥. –ù–∞–∂–º–∏ /start.")
        return

    goal_map = {
        "lose_weight": "–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "gain_muscle": "–ú–∞—Å—Å–∞",
        "health": "–ó–¥–æ—Ä–æ–≤—å–µ", "none": "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None: "–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
    }
    gender_map = {"male": "–ú—É–∂", "female": "–ñ–µ–Ω", None: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

    text = (
        "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–¶–µ–ª—å: {goal_map.get(user.goal)}\n"
        f"–ü–æ–ª: {gender_map.get(user.gender)}\n"
        f"–í–µ—Å: {user.weight_kg} –∫–≥\n"
        f"–†–æ—Å—Ç: {user.height_cm} —Å–º\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age}\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    # –î–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º answer/edit_text
    if isinstance(where, Message):
        await where.answer(text, reply_markup=profile_edit_kb())
    else:
        await where.edit_text(text, reply_markup=profile_edit_kb())

@profile_router.callback_query(F.data == "settings:profile")
async def open_profile_from_settings(cb: CallbackQuery):
    await cb.answer()
    await show_profile_card(cb.message)

# ===== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π =====
@profile_router.callback_query(F.data == "edit:goal")
async def edit_goal(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=goals_kb())
    await state.set_state(Edit.goal)

@profile_router.callback_query(F.data.startswith("goal:"), Edit.goal)
async def set_goal(cb: CallbackQuery, state: FSMContext):
    goal = cb.data.split(":", 1)[1]
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
        user.goal = goal
        await session.commit()
    await cb.message.edit_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await show_profile_card(cb.message)
    await state.clear()
    await cb.answer()

@profile_router.callback_query(F.data == "edit:gender")
async def edit_gender(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=gender_kb())
    await state.set_state(Edit.gender)

@profile_router.callback_query(F.data.startswith("gender:"), Edit.gender)
async def set_gender(cb: CallbackQuery, state: FSMContext):
    gender = cb.data.split(":", 1)[1]
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
        user.gender = gender
        await session.commit()
    await cb.message.edit_text("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: –ü–æ–ª –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await show_profile_card(cb.message)
    await state.clear()
    await cb.answer()

@profile_router.callback_query(F.data == "edit:weight")
async def edit_weight(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
    w = float(user.weight_kg or 70.0)
    await state.update_data(weight=w)
    await cb.message.edit_text(
        f"–í–µ—Å: {w:.1f} –∫–≥\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("w", w, [0.5, 1, 2.5, 5], "–∫–≥", True, with_back=True),
    )
    await state.set_state(Edit.weight)

@profile_router.callback_query(F.data == "edit:height")
async def edit_height(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
    h = int(user.height_cm or 175)
    await state.update_data(height=h)
    await cb.message.edit_text(
        f"–†–æ—Å—Ç: {h} —Å–º\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("h", h, [1, 2, 5], "—Å–º", True, with_back=True),
    )
    await state.set_state(Edit.height)

@profile_router.callback_query(F.data == "edit:age")
async def edit_age(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == cb.from_user.id))
        user = res.first()
    a = int(user.age or 25)
    await state.update_data(age=a)
    await cb.message.edit_text(
        f"–í–æ–∑—Ä–∞—Å—Ç: {a} –ª–µ—Ç\n–ù–∞—Å—Ç—Ä–æ–π –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=stepper_kb("a", a, [1, 2, 5], "–ª–µ—Ç", True, with_back=True),
    )
    await state.set_state(Edit.age)

# ===== –ü—Ä–æ—Ñ–∏–ª—å/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—É–Ω–∫—Ç –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) =====
@profile_router.message(Command("my_profile"))
@profile_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_profile_or_settings(msg: Message):
    # —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è open_settings, –Ω–æ –ø—É—Å—Ç—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è /my_profile
    await open_settings(msg)
