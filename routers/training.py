# routers/training.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –ë–î
# –°–∏–ª–æ–≤—ã–µ: –≥—Ä—É–ø–ø—ã ‚Üí —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Üí –≤–≤–æ–¥ "–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã" / "–≤–µ—Å/–ø–æ–≤—Ç–æ—Ä—ã" ‚Üí —Å—á—ë—Ç—á–∏–∫ ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

from __future__ import annotations

from datetime import datetime
from typing import Optional, Iterable, List
import re

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlmodel import select
from sqlalchemy import func, case

from config import settings
from db import get_session, User, Workout, WorkoutItem, Exercise, MuscleGroup

training_router = Router()

# ========= FSM =========
class Training(StatesGroup):
    choose_group = State()
    choose_exercise = State()
    log_set = State()  # –≤–≤–æ–¥ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

# ========= –ü–∞—Ä—Å–µ—Ä –≤–≤–æ–¥–∞ =========
# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≤–µ—Å–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏: –ø—Ä–æ–±–µ–ª –∏–ª–∏ "/" (–ù–ï –∑–∞–ø—è—Ç–∞—è/—Ç–æ—á–∫–∞, –æ–Ω–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –í–ù–£–¢–†–ò –≤–µ—Å–∞)
STRENGTH_INPUT_RE = re.compile(
    r"^\s*(?P<kg>\d+(?:[.,]\d+)?)\s*(?:/|\s+)\s*(?P<reps>\d+)\s*$"
)

# ========= –£—Ç–∏–ª–∏—Ç—ã =========
async def _get_user(tg_id: int) -> Optional[User]:
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == tg_id))
        return res.first()

async def _create_workout_for_user(tg_id: int) -> int:
    """–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–∏–ª–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–∫–∞–∫ –≤ –∫–∞—Ä–¥–∏–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID."""
    async with await get_session(settings.database_url) as session:
        u = await session.exec(select(User).where(User.tg_id == tg_id))
        user = u.first()
        if not user:
            raise RuntimeError("NO_USER")
        title = datetime.now().strftime("%Y-%m-%d %H:%M")
        w = Workout(user_id=user.id, title=title)  # created_at —Å—Ç–∞–≤–∏—Ç—Å—è –º–æ–¥–µ–ª—å—é
        session.add(w)
        await session.commit()
        await session.refresh(w)
        return w.id

async def _fetch_groups() -> List[MuscleGroup]:
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(MuscleGroup).where(MuscleGroup.slug != "cardio"))
        return res.all()

async def _fetch_exercises(group_id: Optional[int], page: int = 0, per_page: int = 20) -> tuple[list[Exercise], int]:
    async with await get_session(settings.database_url) as session:
        base = select(Exercise).where(Exercise.type == "strength")
        if group_id:
            base = base.where(Exercise.primary_muscle_id == group_id)

        count_query = select(func.count()).select_from(base.subquery())
        total = (await session.exec(count_query)).one() or 0

        res = await session.exec(
            base.order_by(Exercise.name.asc()).offset(page * per_page).limit(per_page)
        )
        return res.all(), int(total)

def _chunk(it: Iterable, n: int) -> list[list]:
    row, rows = [], []
    for x in it:
        row.append(x)
        if len(row) == n:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return rows

def _groups_kb(groups: list[MuscleGroup]) -> InlineKeyboardMarkup:
    btns = [InlineKeyboardButton(text=g.name, callback_data=f"grp:{g.id}") for g in groups]
    rows = _chunk(btns, 2)  # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _exercises_kb(exercises: list[Exercise]) -> InlineKeyboardMarkup:
    btns = [InlineKeyboardButton(text=e.name, callback_data=f"ex:{e.id}") for e in exercises]
    rows = _chunk(btns, 2)
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back:groups"),
        InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="workout:finish"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _exercise_panel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="back:groups"),
         InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="ex:finish")],
        [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="workout:finish")],
    ])

async def _exercise_name(ex_id: int) -> str:
    async with await get_session(settings.database_url) as session:
        ex = await session.get(Exercise, ex_id)
    return ex.name if ex else "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"

async def _count_sets_for_ex(workout_id: int, exercise_id: int) -> int:
    async with await get_session(settings.database_url) as session:
        q = select(func.count()).where(
            WorkoutItem.workout_id == workout_id,
            WorkoutItem.exercise_id == exercise_id,
            WorkoutItem.reps.is_not(None),
            WorkoutItem.weight.is_not(None),
        )
        return int((await session.exec(q)).one() or 0)

def _exercise_card_text(name: str, saved_sets: int) -> str:
    return (
        f"üèãÔ∏è <b>{name}</b>\n"
        f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤: <b>{saved_sets}</b>\n\n"
        "–í–≤–µ–¥–∏ –ø–æ–¥—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã</code> –∏–ª–∏ <code>–≤–µ—Å/–ø–æ–≤—Ç–æ—Ä—ã</code>\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <code>75 10</code>, <code>80/8</code>, <code>112,5 5</code>, <code>24.5/8</code>\n\n"
        "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –ø–æ–¥—Ä—è–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π."
    )

async def _workout_totals(workout_id: int) -> tuple[int, float]:
    """–ò—Ç–æ–≥–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: —á–∏—Å–ª–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–¥–Ω—è—Ç—ã–π –≤–µ—Å (–≥–∞–Ω—Ç–µ–ª—å–Ω—ã–µ √ó2 –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)."""
    async with await get_session(settings.database_url) as session:
        q_sets = select(func.count()).where(
            WorkoutItem.workout_id == workout_id,
            WorkoutItem.reps.is_not(None),
            WorkoutItem.weight.is_not(None),
        )
        sets_cnt = int((await session.exec(q_sets)).one() or 0)

        q_lifted = (
            select(
                func.coalesce(
                    func.sum(
                        case(
                            (func.lower(Exercise.name).like("%–≥–∞–Ω—Ç–µ–ª%"), 2),
                            else_=1,
                        ) * WorkoutItem.weight * WorkoutItem.reps
                    ),
                    0
                )
            )
            .join(Exercise, Exercise.id == WorkoutItem.exercise_id)
            .where(
                WorkoutItem.workout_id == workout_id,
                WorkoutItem.reps.is_not(None),
                WorkoutItem.weight.is_not(None),
            )
        )
        lifted = float((await session.exec(q_lifted)).one() or 0.0)

    return sets_cnt, lifted

async def safe_edit_text(message, text: str, reply_markup=None):
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    except Exception:
        await message.answer(text, reply_markup=reply_markup, parse_mode="HTML")

# ========= –°—Ç–∞—Ä—Ç —Å–∏–ª–æ–≤–æ–π =========
@training_router.message(F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def start_training(msg: Message, state: FSMContext):
    user = await _get_user(msg.from_user.id)
    if not user:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ /start –∏ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å. –≠—Ç–æ –±—ã—Å—Ç—Ä–æ.")
        return

    workout_id = await _create_workout_for_user(msg.from_user.id)
    await state.clear()
    await state.update_data(workout_id=workout_id)

    groups = await _fetch_groups()
    if not groups:
        await msg.answer("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –î–æ–±–∞–≤—å –≥—Ä—É–ø–ø—ã –≤ –ë–î –∏ –≤–µ—Ä–Ω–∏—Å—å.")
        return

    await msg.answer("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=_groups_kb(groups))
    await state.set_state(Training.choose_group)

# ========= –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã =========
@training_router.callback_query(F.data.startswith("grp:"), Training.choose_group)
async def pick_group(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    group_id = int(cb.data.split(":", 1)[1])
    await state.update_data(group_id=group_id)

    exs, total = await _fetch_exercises(group_id)
    if not exs:
        await safe_edit_text(cb.message, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é.")
        return

    await safe_edit_text(cb.message, f"–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ({total} –Ω–∞–π–¥–µ–Ω–æ):", reply_markup=_exercises_kb(exs))
    await state.set_state(Training.choose_exercise)

# ========= –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º (–∏–∑ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏–ª–æ–≤–æ–π) =========
@training_router.callback_query(F.data == "back:groups")
async def back_groups(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    groups = await _fetch_groups()
    await safe_edit_text(cb.message, "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=_groups_kb(groups))
    await state.set_state(Training.choose_group)

# ========= –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =========
@training_router.callback_query(F.data.startswith("ex:"), Training.choose_exercise)
async def pick_exercise(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    exercise_id = int(cb.data.split(":", 1)[1])
    await state.update_data(exercise_id=exercise_id)

    name = await _exercise_name(exercise_id)
    data = await state.get_data()
    workout_id = int(data.get("workout_id") or 0)
    saved = await _count_sets_for_ex(workout_id, exercise_id)

    await cb.message.edit_text(
        _exercise_card_text(name, saved),
        reply_markup=_exercise_panel_kb(),
        parse_mode="HTML"
    )

    # –∑–∞–ø–æ–º–Ω–∏–º id —Å–æ–æ–±—â–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—á—ë—Ç—á–∏–∫
    await state.update_data(s_last_msg=cb.message.message_id, s_ex_name=name)
    await state.set_state(Training.log_set)

# ========= –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É) =========
@training_router.callback_query(F.data == "ex:finish", Training.log_set)
async def finish_exercise(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    group_id = int(data.get("group_id") or 0)
    if not group_id:
        groups = await _fetch_groups()
        await safe_edit_text(cb.message, "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=_groups_kb(groups))
        await state.set_state(Training.choose_group)
        return

    exs, total = await _fetch_exercises(group_id)
    await safe_edit_text(cb.message, f"–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ({total} –Ω–∞–π–¥–µ–Ω–æ):", reply_markup=_exercises_kb(exs))
    await state.set_state(Training.choose_exercise)

# ========= –í–≤–æ–¥ –ø–æ–¥—Ö–æ–¥–∞ =========
@training_router.message(Training.log_set)
async def log_set(msg: Message, state: FSMContext):
    raw = (msg.text or "").strip()
    m = STRENGTH_INPUT_RE.match(raw)
    if not m:
        await msg.answer(
            "–§–æ—Ä–º–∞—Ç: <b>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã</b> –∏–ª–∏ <b>–≤–µ—Å/–ø–æ–≤—Ç–æ—Ä—ã</b>\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>75 10</code>, <code>80/8</code>, <code>112,5 5</code>, <code>24.5/8</code>",
            parse_mode="HTML",
        )
        return

    weight = float(m.group("kg").replace(",", "."))
    reps = int(m.group("reps"))
    if weight <= 0 or reps <= 0:
        await msg.answer("–ù—É–∂–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <code>40 8</code>", parse_mode="HTML")
        return

    data = await state.get_data()
    workout_id = int(data.get("workout_id") or 0)
    exercise_id = int(data.get("exercise_id") or 0)
    last_msg_id = int(data.get("s_last_msg") or 0)
    ex_name = data.get("s_ex_name") or (await _exercise_name(exercise_id))

    # –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ workout_id, –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª
    if not workout_id:
        async with await get_session(settings.database_url) as session:
            res = await session.exec(
                select(Workout)
                .join(User, User.id == Workout.user_id)
                .where(User.tg_id == msg.from_user.id)
                .order_by(Workout.created_at.desc())
                .limit(1)
            )
            last = res.first()
            if last:
                workout_id = last.id
                await state.update_data(workout_id=workout_id)

    if not exercise_id:
        await msg.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ.")
        await state.set_state(Training.choose_exercise)
        return

    if not workout_id:
        await msg.answer("–°–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å. –ù–∞–∂–º–∏ ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ö–æ–¥
    async with await get_session(settings.database_url) as session:
        item = WorkoutItem(
            workout_id=workout_id,
            exercise_id=exercise_id,
            weight=weight,
            reps=reps,
            created_at=datetime.utcnow(),
        )
        session.add(item)
        await session.commit()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    saved = await _count_sets_for_ex(workout_id, exercise_id)
    card_text = _exercise_card_text(ex_name, saved)

    try:
        await msg.bot.edit_message_text(
            chat_id=msg.chat.id,
            message_id=last_msg_id or msg.message_id,
            text=card_text,
            reply_markup=_exercise_panel_kb(),
            parse_mode="HTML",
        )
    except Exception:
        sent = await msg.answer(card_text, reply_markup=_exercise_panel_kb(), parse_mode="HTML")
        await state.update_data(s_last_msg=sent.message_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await msg.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ex_name} ‚Äî {weight:.1f} –∫–≥ √ó {reps}")

# ========= –ó–∞–≤–µ—Ä—à–∏—Ç—å –í–°–Æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É =========
@training_router.callback_query(F.data == "workout:finish")
async def workout_finish(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    workout_id = int(data.get("workout_id") or 0)

    # –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ id —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –Ω–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not workout_id:
        async with await get_session(settings.database_url) as session:
            res = await session.exec(
                select(Workout)
                .join(User, User.id == Workout.user_id)
                .where(User.tg_id == cb.from_user.id)
                .order_by(Workout.created_at.desc())
                .limit(1)
            )
            last = res.first()
            workout_id = last.id if last else 0

    if not workout_id:
        await safe_edit_text(cb.message, "–ê–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª.")
        await state.clear()
        return

    sets_cnt, lifted = await _workout_totals(workout_id)
    await safe_edit_text(
        cb.message,
        "üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ü–æ–¥—Ö–æ–¥–æ–≤: <b>{sets_cnt}</b>\n"
        f"–ü–æ–¥–Ω—è—Ç—ã–π –≤–µ—Å: <b>{int(lifted)} –∫–≥</b>",
    )
    await state.clear()
