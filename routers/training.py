# routers/training.py ‚Äî —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–æ–π –ë–î (db.py –∏–∑ –¥–∞–º–ø–∞ 87)
# –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤, –∏—Ç–æ–≥

from __future__ import annotations

from datetime import datetime
from typing import Optional, Iterable, List

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlmodel import select
from sqlalchemy import func

from config import settings
from db import get_session, User, Workout, WorkoutItem, Exercise, MuscleGroup

training_router = Router()


# ===================== –°–æ—Å—Ç–æ—è–Ω–∏—è =====================
class Training(StatesGroup):
    choose_group = State()
    choose_exercise = State()
    log_set = State()  # –≤–≤–æ–¥ "–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è


# ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =====================
async def _get_user(tg_id: int) -> Optional[User]:
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == tg_id))
        return res.first()

async def _create_workout_for_user(tg_id: int) -> int:
    """–í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–∫–∞–∫ –≤ cardio), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º workout.id"""
    async with await get_session(settings.database_url) as session:
        u = await session.exec(select(User).where(User.tg_id == tg_id))
        user = u.first()
        if not user:
            raise RuntimeError("NO_USER")
        title = datetime.now().strftime("%Y-%m-%d %H:%M")
        w = Workout(user_id=user.id, title=title)
        session.add(w)
        await session.commit()
        await session.refresh(w)
        return w.id

async def _fetch_groups() -> List[MuscleGroup]:
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(MuscleGroup).where(MuscleGroup.slug != "cardio"))
        return res.all()

async def _fetch_exercises(group_id: Optional[int], page: int = 0, per_page: int = 20) -> tuple[list[Exercise], int]:
    async with await get_session(settings.database_url) as session:
        base = select(Exercise).where(Exercise.type == "strength")
        if group_id:
            base = base.where(Exercise.primary_muscle_id == group_id)

        cnt = (await session.exec(select(func.count()).select_from(base.subquery()))).one() or 0
        res = await session.exec(
            base.order_by(Exercise.name.asc()).offset(page * per_page).limit(per_page)
        )
        return res.all(), int(cnt)

def _chunk(it: Iterable, n: int) -> list[list]:
    row, rows = [], []
    for x in it:
        row.append(x)
        if len(row) == n:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return rows

def _groups_kb(groups: list[MuscleGroup]) -> InlineKeyboardMarkup:
    btns = [InlineKeyboardButton(text=g.name, callback_data=f"grp:{g.id}") for g in groups]
    rows = _chunk(btns, 2)  # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _exercises_kb(exercises: list[Exercise]) -> InlineKeyboardMarkup:
    btns = [InlineKeyboardButton(text=e.name, callback_data=f"ex:{e.id}") for e in exercises]
    rows = _chunk(btns, 2)
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:groups"),
        InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _finish_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥", callback_data="noop")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:groups"),
         InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish")],
    ])

async def _exercise_name(ex_id: int) -> str:
    async with await get_session(settings.database_url) as session:
        ex = await session.get(Exercise, ex_id)
    return ex.name if ex else "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"

async def _workout_totals(workout_id: int) -> tuple[int, float]:
    """–ü–æ–¥—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤ –¥–ª—è —Å–∏–ª–æ–≤—ã—Ö: —á–∏—Å–ª–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ —Ç–æ–Ω–Ω–∞–∂ (–≤–µ—Å*–ø–æ–≤—Ç–æ—Ä—ã)"""
    async with await get_session(settings.database_url) as session:
        # —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ –∏ –≤–µ—Å–æ–º
        q_sets = select(func.count()).where(
            WorkoutItem.workout_id == workout_id,
            WorkoutItem.reps.is_not(None),
            WorkoutItem.weight.is_not(None),
        )
        sets_cnt = (await session.exec(q_sets)).one() or 0

        q_ton = select(func.coalesce(func.sum(WorkoutItem.weight * WorkoutItem.reps), 0)).where(
            WorkoutItem.workout_id == workout_id,
            WorkoutItem.reps.is_not(None),
            WorkoutItem.weight.is_not(None),
        )
        ton = (await session.exec(q_ton)).one() or 0
    return int(sets_cnt), float(ton)


# ===================== –°—Ç–∞—Ä—Ç —Å–∏–ª–æ–≤–æ–π =====================
@training_router.message(F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def start_training(msg: Message, state: FSMContext):
    user = await _get_user(msg.from_user.id)
    if not user or not all([user.gender, user.weight_kg, user.height_cm, user.age]):
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ /start –∏ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É, –ø–µ—Ä–µ–∂–∏–≤—ë—à—å.")
        return

    workout_id = await _create_workout_for_user(msg.from_user.id)
    await state.clear()
    await state.update_data(workout_id=workout_id)

    groups = await _fetch_groups()
    if not groups:
        await msg.answer("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç. –î–æ–±–∞–≤—å –≥—Ä—É–ø–ø—ã –≤ –ë–î –∏ –≤–µ—Ä–Ω–∏—Å—å.")
        return

    await msg.answer("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=_groups_kb(groups))
    await state.set_state(Training.choose_group)


# ===================== –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã =====================
@training_router.callback_query(F.data.startswith("grp:"), Training.choose_group)
async def pick_group(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    group_id = int(cb.data.split(":", 1)[1])

    exs, total = await _fetch_exercises(group_id)
    if not exs:
        await cb.message.edit_text("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é.")
        return

    await cb.message.edit_text(f"–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ({total} –Ω–∞–π–¥–µ–Ω–æ):", reply_markup=_exercises_kb(exs))
    await state.update_data(group_id=group_id)
    await state.set_state(Training.choose_exercise)


# ===================== –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º =====================
@training_router.callback_query(F.data == "back:groups")
async def back_groups(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    groups = await _fetch_groups()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=_groups_kb(groups))
    await state.set_state(Training.choose_group)


# ===================== –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====================
@training_router.callback_query(F.data.startswith("ex:"), Training.choose_exercise)
async def pick_exercise(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    exercise_id = int(cb.data.split(":", 1)[1])
    await state.update_data(exercise_id=exercise_id)

    name = await _exercise_name(exercise_id)
    text = (
        f"üèãÔ∏è <b>{name}</b>\n\n"
        "–í–≤–µ–¥–∏ –ø–æ–¥—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã</code>\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä <code>75 10</code>\n\n"
        "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –ø–æ–¥—Ä—è–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π."
    )
    await cb.message.edit_text(text, reply_markup=_finish_kb(), parse_mode="HTML")
    await state.set_state(Training.log_set)


# ===================== –í–≤–æ–¥ –ø–æ–¥—Ö–æ–¥–∞ (—Ä—É—á–Ω–æ–π) =====================
@training_router.message(Training.log_set)
async def log_set(msg: Message, state: FSMContext):
    raw = (msg.text or "").strip().replace(",", ".")
    parts = raw.split()
    if len(parts) != 2:
        await msg.answer("–§–æ—Ä–º–∞—Ç: <b>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã</b> (–ø—Ä–∏–º–µ—Ä: <code>75 10</code>)", parse_mode="HTML")
        return

    try:
        weight = float(parts[0])
        reps = int(parts[1])
    except ValueError:
        await msg.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: <code>60 12</code>", parse_mode="HTML")
        return

    if weight <= 0 or reps <= 0:
        await msg.answer("–ù—É–∂–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <code>40 8</code>", parse_mode="HTML")
        return

    data = await state.get_data()
    workout_id = int(data.get("workout_id", 0))
    exercise_id = int(data.get("exercise_id", 0))
    if not workout_id or not exercise_id:
        await msg.answer("–°–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å. –ù–∞–∂–º–∏ ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    async with await get_session(settings.database_url) as session:
        item = WorkoutItem(
            workout_id=workout_id,
            exercise_id=exercise_id,
            weight=weight,
            reps=reps,
            created_at=datetime.utcnow(),
        )
        session.add(item)
        await session.commit()

        ex = await session.get(Exercise, exercise_id)

    await msg.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ex.name} ‚Äî {weight:.1f} –∫–≥ √ó {reps}")

    # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥
    await msg.answer("–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª.", reply_markup=_finish_kb())


# ===================== –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É =====================
@training_router.callback_query(F.data == "finish")
async def finish_training(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    data = await state.get_data()
    workout_id = int(data.get("workout_id", 0))

    # –µ—Å–ª–∏ FSM –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å, –≤–æ–∑—å–º—ë–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not workout_id:
        async with await get_session(settings.database_url) as session:
            res = await session.exec(
                select(Workout)
                .join(User, User.id == Workout.user_id)
                .where(User.tg_id == cb.from_user.id)
                .order_by(Workout.created_at.desc())
                .limit(1)
            )
            w = res.first()
            workout_id = w.id if w else 0

    if not workout_id:
        await cb.message.edit_text("–ê–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª.")
        await state.clear()
        return

    sets_cnt, ton = await _workout_totals(workout_id)
    await cb.message.edit_text(
        "üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ü–æ–¥—Ö–æ–¥–æ–≤: <b>{sets_cnt}</b>\n"
        f"–û–±—â–∏–π —Ç–æ–Ω–Ω–∞–∂: <b>{int(ton)} –∫–≥</b>",
        parse_mode="HTML",
    )
    await state.clear()
