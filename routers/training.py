# routers/training.py ‚Äî –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è (2025-10-09)
# –°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlmodel import select, func
from datetime import datetime

from config import settings
from db import get_session, Workout, WorkoutItem, Exercise, MuscleGroup, User

training_router = Router()


# ===== FSM =====
class Training(StatesGroup):
    choose_group = State()
    choose_exercise = State()
    log_set = State()


# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
async def _fetch_groups():
    """–ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(MuscleGroup).where(MuscleGroup.slug != "cardio"))
        groups = res.all()
        return groups


async def _fetch_exercises(group_id: int | None, page: int = 0, per_page: int = 15):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–µ."""
    async with await get_session(settings.database_url) as session:
        q = select(Exercise).where(Exercise.type == "strength")
        if group_id:
            q = q.where(Exercise.primary_muscle_id == group_id)
        count = await session.exec(select(func.count()).select_from(q.subquery()))
        total = count.one() or 0
        res = await session.exec(
            q.order_by(Exercise.name.asc())
             .offset(page * per_page)
             .limit(per_page)
        )
        return res.all(), int(total)


async def _get_or_create_workout(user_tg_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é."""
    async with await get_session(settings.database_url) as session:
        res = await session.exec(
            select(Workout)
            .where(Workout.user_tg_id == user_tg_id)
            .order_by(Workout.id.desc())
            .limit(1)
        )
        last = res.first()
        if last and not last.finished_at:
            return last

        new = Workout(user_tg_id=user_tg_id, started_at=datetime.utcnow())
        session.add(new)
        await session.commit()
        await session.refresh(new)
        return new


async def safe_edit_text(message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)."""
    try:
        await message.edit_text(text, reply_markup=reply_markup)
    except Exception:
        await message.answer(text, reply_markup=reply_markup)


# ===== –ö–Ω–æ–ø–∫–∏ =====
def _group_buttons(groups):
    rows = []
    for g in groups:
        rows.append([InlineKeyboardButton(text=g.name, callback_data=f"group:{g.id}")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _exercise_buttons(exercises):
    rows = []
    for e in exercises:
        rows.append([InlineKeyboardButton(text=e.name, callback_data=f"ex:{e.id}")])
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:groups"),
        InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def _finish_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:groups")],
    ])


# ===== –ö–æ–º–∞–Ω–¥–∞ /train =====
@training_router.message(F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def start_training(msg: Message, state: FSMContext):
    groups = await _fetch_groups()
    await msg.answer("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=_group_buttons(groups))
    await state.set_state(Training.choose_group)


# ===== –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã =====
@training_router.callback_query(F.data.startswith("group:"), Training.choose_group)
async def choose_group(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    group_id = int(cb.data.split(":")[1])
    exercises, total = await _fetch_exercises(group_id)
    if not exercises:
        await safe_edit_text(cb.message, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        return
    await safe_edit_text(
        cb.message,
        f"–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ({total} –Ω–∞–π–¥–µ–Ω–æ):",
        reply_markup=_exercise_buttons(exercises),
    )
    await state.update_data(group_id=group_id)
    await state.set_state(Training.choose_exercise)


# ===== –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º =====
@training_router.callback_query(F.data == "back:groups")
async def back_to_groups(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    groups = await _fetch_groups()
    await safe_edit_text(cb.message, "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:", reply_markup=_group_buttons(groups))
    await state.set_state(Training.choose_group)


# ===== –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
@training_router.callback_query(F.data.startswith("ex:"), Training.choose_exercise)
async def choose_exercise(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    exercise_id = int(cb.data.split(":")[1])

    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(Exercise).where(Exercise.id == exercise_id))
        exercise = res.first()

    if not exercise:
        await cb.message.answer("–û—à–∏–±–∫–∞: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    workout = await _get_or_create_workout(cb.from_user.id)

    # –æ–±–Ω–æ–≤–∏–º FSM
    await state.update_data(exercise_id=exercise.id, workout_id=workout.id)

    text = (
        f"üèãÔ∏è <b>{exercise.name}</b>\n\n"
        "–í–≤–µ–¥–∏ –ø–æ–¥—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã</code>\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä <code>75 10</code>"
    )
    await safe_edit_text(cb.message, text, reply_markup=_finish_kb())
    await state.set_state(Training.log_set)


# ===== –í–≤–æ–¥ –ø–æ–¥—Ö–æ–¥–∞ –≤—Ä—É—á–Ω—É—é =====
@training_router.message(Training.log_set)
async def manual_log_set(msg: Message, state: FSMContext):
    text = msg.text.strip()
    parts = text.replace(",", ".").split()
    if len(parts) != 2:
        await msg.answer("–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: <b>–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: 75 10")
        return

    try:
        weight = float(parts[0])
        reps = int(parts[1])
    except ValueError:
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: 75 10")
        return

    data = await state.get_data()
    workout_id = data.get("workout_id")
    exercise_id = data.get("exercise_id")

    async with await get_session(settings.database_url) as session:
        item = WorkoutItem(
            workout_id=workout_id,
            exercise_id=exercise_id,
            weight=weight,
            reps=reps,
            logged_at=datetime.utcnow(),
        )
        session.add(item)
        await session.commit()

        res = await session.exec(select(Exercise).where(Exercise.id == exercise_id))
        ex = res.first()

    await msg.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ex.name} ‚Äî {weight} –∫–≥ √ó {reps} –ø–æ–≤—Ç–æ—Ä–æ–≤")

    await msg.answer(
        "–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
        reply_markup=_finish_kb(),
    )


# ===== –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ, –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è) =====
from sqlalchemy import func

@training_router.callback_query(F.data == "finish")
async def finish_training(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    user_id = cb.from_user.id

    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å workout_id –∏–∑ FSM, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é
    data = await state.get_data()
    workout_id = data.get("workout_id")

    async with await get_session(settings.database_url) as session:
        workout = None

        if workout_id:
            res = await session.exec(select(Workout).where(Workout.id == workout_id))
            workout = res.first()

        if not workout:
            res = await session.exec(
                select(Workout)
                .where(Workout.user_tg_id == user_id, Workout.finished_at.is_(None))
                .order_by(Workout.id.desc())
                .limit(1)
            )
            workout = res.first()

        if not workout:
            await cb.message.answer("–ê–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç. –ù–∞—á–Ω–∏ —Å ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª.")
            await state.clear()
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        workout.finished_at = datetime.utcnow()
        await session.commit()

        # –ò—Ç–æ–≥–∏
        total_sets = (await session.exec(
            select(func.count()).where(WorkoutItem.workout_id == workout.id)
        )).one() or 0

        total_weight = (await session.exec(
            select(func.coalesce(func.sum(WorkoutItem.weight * WorkoutItem.reps), 0))
            .where(WorkoutItem.workout_id == workout.id)
        )).one() or 0

    await cb.message.answer(
        "üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ü–æ–¥—Ö–æ–¥–æ–≤: {total_sets}\n"
        f"–û–±—â–∏–π —Ç–æ–Ω–Ω–∞–∂: {int(total_weight)} –∫–≥"
    )
    await state.clear()
