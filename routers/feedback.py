# routers/feedback.py ‚Äî —Å–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞

from routers.profile import main_menu
from __future__ import annotations

import asyncio
from datetime import datetime, timedelta
from typing import Optional

import aiohttp
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from sqlmodel import select

from config import settings
from db import get_session, User, Feedback

feedback_router = Router()

# –ê–Ω—Ç–∏—Å–ø–∞–º –≤ –ø–∞–º—è—Ç–∏: user_tg_id -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
_last_sent: dict[int, datetime] = {}

class FB(StatesGroup):
    picking = State()
    typing = State()

def feedback_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üêû –ü—Ä–æ–±–ª–µ–º–∞", callback_data="fb:type:bug"),
         InlineKeyboardButton(text="üí° –ò–¥–µ—è", callback_data="fb:type:idea")],
        [InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–±–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="fb:type:free")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:menu")],
    ])

def cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="fb:cancel")]
    ])

# –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–¥–µ—Ä–≥–∞–µ—Ç—Å—è –∏–∑ –ù–∞—Å—Ç—Ä–æ–µ–∫)
@feedback_router.callback_query(F.data == "settings:feedback")
async def open_feedback_menu(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=feedback_menu_kb())
    await state.set_state(FB.picking)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞
@feedback_router.callback_query(F.data.startswith("fb:type:"), FB.picking)
async def choose_type(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    fb_type = cb.data.split(":", 2)[2]  # bug | idea | free
    await state.update_data(fb_type=fb_type)

    prompt = {
        "bug": "–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É. –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∂–∏: —á—Ç–æ –¥–µ–ª–∞–ª, —á—Ç–æ –æ–∂–∏–¥–∞–ª, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.",
        "idea": "–û–ø–∏—à–∏ –∏–¥–µ—é –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ. –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —Å–¥–µ–ª–∞–µ–º.",
        "free": "–ù–∞–ø–∏—à–∏ –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
    }[fb_type]

    await cb.message.edit_text(
        f"‚úçÔ∏è {prompt}\n\n–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –õ–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤.",
        reply_markup=cancel_kb()
    )
    # –∑–∞–ø–æ–º–Ω–∏–º id —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –µ—ë –Ω–∞ ¬´—Å–ø–∞—Å–∏–±–æ¬ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await state.update_data(fb_prompt_msg_id=cb.message.message_id)
    await state.set_state(FB.typing)


# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
@feedback_router.callback_query(F.data == "fb:cancel")
async def cancel_feedback(cb: CallbackQuery, state: FSMContext):
    await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await cb.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=feedback_menu_kb())

# –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞
@feedback_router.message(FB.typing)
async def receive_text(msg: Message, state: FSMContext):
    user_tg_id = msg.from_user.id

    # –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
    now = datetime.utcnow()
    ts = _last_sent.get(user_tg_id)
    if ts and (now - ts) < timedelta(seconds=10):
        await msg.answer("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ä–∞–∑. –ù–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫.")
        return

    data = await state.get_data()
    fb_type = data.get("fb_type") or "free"
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.", reply_markup=cancel_kb())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == user_tg_id))
        user: Optional[User] = res.first()

        fb = Feedback(
            user_id=user.id if user else None,
            user_tg_id=user_tg_id,
            username=msg.from_user.username,
            full_name=f"{msg.from_user.first_name or ''} {msg.from_user.last_name or ''}".strip() or None,
            type=fb_type,
            text=text,
            created_at=datetime.utcnow(),
        )
        session.add(fb)
        await session.commit()
        await session.refresh(fb)

    # –ü–µ—Ä–µ—Å–ª–∞–µ–º –≤–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
    ok, err = await _relay_to_admin_bot(fb_type=fb_type,
                                        text=text,
                                        from_user=user_tg_id,
                                        username=msg.from_user.username,
                                        full_name=f"{msg.from_user.first_name or ''} {msg.from_user.last_name or ''}".strip(),
                                        feedback_id=fb.id)
    if not ok:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    _last_sent[user_tg_id] = now

    # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–º–µ–Ω–∏–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∞ ¬´—Å–ø–∞—Å–∏–±–æ¬ª –∏ —É–±–µ—Ä—ë–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª
    prompt_id = (await state.get_data()).get("fb_prompt_msg_id")
    thanks = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ, –º—ã —É–∂–µ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ–º—Å—è, —á—Ç–æ —á–∏—Ç–∞–µ–º."
    if prompt_id:
        try:
            await msg.bot.edit_message_text(
                chat_id=msg.chat.id,
                message_id=prompt_id,
                text=thanks
            )
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await msg.answer(thanks)
    else:
        await msg.answer(thanks)

    # –æ—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


async def _relay_to_admin_bot(fb_type: str, text: str, from_user: int, username: Optional[str],
                              full_name: Optional[str], feedback_id: int) -> tuple[bool, Optional[str]]:
    """
    –®–ª—ë–º –≤–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ sendMessage.
    settings.FEEDBACK_BOT_TOKEN –∏ settings.FEEDBACK_CHAT_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.
    """
    token = settings.feedback_bot_token
    chat_id = settings.feedback_chat_id
    if not token or not chat_id:
        return False, "FEEDBACK_* env not set"

    tag = {"bug": "üêû –ü—Ä–æ–±–ª–µ–º–∞", "idea": "üí° –ò–¥–µ—è", "free": "‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ"}.get(fb_type, "‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ")
    head = f"{tag} ‚Ä¢ #{feedback_id}"
    user_line = f"From: {full_name or ''} @{username or ''} (tg_id={from_user})".strip()

    payload = {
        "chat_id": str(chat_id),
        "text": f"{head}\n{user_line}\n\n{text}",
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as s:
            async with s.post(url, json=payload) as r:
                if r.status != 200:
                    return False, f"http {r.status}"
                data = await r.json()
                return bool(data.get("ok")), None
    except Exception as e:
        return False, str(e)
