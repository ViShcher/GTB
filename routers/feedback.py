# routers/feedback.py ‚Äî –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å ForceReply: –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è, –∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª —Å–Ω–∏–º–∞–µ—Ç—Å—è.
from __future__ import annotations

from datetime import datetime, timedelta
from typing import Optional

import aiohttp
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
    ForceReply,
)
from sqlmodel import select

from config import settings
from db import get_session, User, Feedback
from routers.profile import main_menu

feedback_router = Router()

# –ê–Ω—Ç–∏—Å–ø–∞–º –≤ –ø–∞–º—è—Ç–∏: user_tg_id -> –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
_last_sent: dict[int, datetime] = {}

class FB(StatesGroup):
    picking = State()
    typing = State()

def feedback_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üêû –ü—Ä–æ–±–ª–µ–º–∞", callback_data="fb:type:bug"),
         InlineKeyboardButton(text="üí° –ò–¥–µ—è", callback_data="fb:type:idea")],
        [InlineKeyboardButton(text="‚úçÔ∏è –°–≤–æ–±–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="fb:type:free")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings:menu")],
    ])

def cancel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="fb:cancel")]
    ])

# –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ù–∞—Å—Ç—Ä–æ–µ–∫)
@feedback_router.callback_query(F.data == "settings:feedback")
async def open_feedback_menu(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.edit_text("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=feedback_menu_kb())
    await state.set_state(FB.picking)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ë–ï–ó –ª–∏—à–Ω–µ–≥–æ ¬´–ª–∏–º–∏—Ç–∞¬ª + ForceReply –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@feedback_router.callback_query(F.data.startswith("fb:type:"), FB.picking)
async def choose_type(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    fb_type = cb.data.split(":", 2)[2]  # bug | idea | free
    await state.update_data(fb_type=fb_type)

    prompt = {
        "bug": "‚úçÔ∏è –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É. –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∂–∏: —á—Ç–æ –¥–µ–ª–∞–ª, —á—Ç–æ –æ–∂–∏–¥–∞–ª, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.",
        "idea": "‚úçÔ∏è –û–ø–∏—à–∏ –∏–¥–µ—é –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ. –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ —Å–¥–µ–ª–∞–µ–º.",
        "free": "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
    }[fb_type]

    # 1) –°–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å ForceReply ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–∑—É
    prompt_msg = await cb.message.answer(
        prompt,
        reply_markup=ForceReply(input_field_placeholder="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶")
    )

    # 2) –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª
    cancel_msg = await cb.message.answer(
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
        reply_markup=cancel_kb()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ message_id, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–Ω—è—Ç—å –∫–Ω–æ–ø–∫–∏/–ø–æ—á–∏—Å—Ç–∏—Ç—å
    await state.update_data(
        fb_prompt_msg_id=prompt_msg.message_id,
        fb_cancel_msg_id=cancel_msg.message_id
    )
    await state.set_state(FB.typing)

# –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –≤–µ—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
@feedback_router.callback_query(F.data == "fb:cancel")
async def cancel_feedback(cb: CallbackQuery, state: FSMContext):
    await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

    data = await state.get_data()
    # –£–¥–∞–ª–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å ForceReply, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∞
    prompt_id = data.get("fb_prompt_msg_id")
    if prompt_id:
        try:
            await cb.message.bot.delete_message(cb.message.chat.id, prompt_id)
        except Exception:
            pass

    # –ü—Ä–µ–≤—Ä–∞—Ç–∏–º —Ç–µ–∫—É—â–µ–µ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    await cb.message.edit_text("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=feedback_menu_kb())

    await state.clear()

# –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞
@feedback_router.message(FB.typing)
async def receive_text(msg: Message, state: FSMContext):
    user_tg_id = msg.from_user.id

    # –ê–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
    now = datetime.utcnow()
    ts = _last_sent.get(user_tg_id)
    if ts and (now - ts) < timedelta(seconds=10):
        await msg.answer("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë —Ä–∞–∑. –ù–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫.")
        return

    data = await state.get_data()
    fb_type = data.get("fb_type") or "free"
    text = (msg.text or "").strip()
    if not text:
        await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == user_tg_id))
        user: Optional[User] = res.first()

        fb = Feedback(
            user_id=user.id if user else None,
            user_tg_id=user_tg_id,
            username=msg.from_user.username,
            full_name=f"{msg.from_user.first_name or ''} {msg.from_user.last_name or ''}".strip() or None,
            type=fb_type,
            text=text,
            created_at=datetime.utcnow(),
        )
        session.add(fb)
        await session.commit()
        await session.refresh(fb)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
    ok, err = await _relay_to_admin_bot(
        fb_type=fb_type,
        text=text,
        from_user=user_tg_id,
        username=msg.from_user.username,
        full_name=f"{msg.from_user.first_name or ''} {msg.from_user.last_name or ''}".strip(),
        feedback_id=fb.id
    )
    if not ok:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    _last_sent[user_tg_id] = now

    # 1) –°–Ω—è—Ç—å –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª (–∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–π)
    cancel_id = data.get("fb_cancel_msg_id")
    if cancel_id:
        try:
            # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏, —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–≤—Å–µ
            await msg.bot.edit_message_reply_markup(chat_id=msg.chat.id, message_id=cancel_id, reply_markup=None)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å
            try:
                await msg.bot.delete_message(msg.chat.id, cancel_id)
            except Exception:
                pass

    # 2) –ü–æ–¥—Å–∫–∞–∑–∫—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏—Å—Ç–æ—Ä–∏—è –±—ã–ª–∞ —è—Å–Ω–æ–π.
    #    –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–∏–º ¬´—Å–ø–∞—Å–∏–±–æ¬ª –∏ –æ—Ç–∫—Ä–æ–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª)
    thanks = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ, –º—ã —É–∂–µ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ–º—Å—è, —á—Ç–æ —á–∏—Ç–∞–µ–º."
    await msg.answer(thanks, reply_markup=main_menu())

    await state.clear()

async def _relay_to_admin_bot(
    fb_type: str,
    text: str,
    from_user: int,
    username: Optional[str],
    full_name: Optional[str],
    feedback_id: int
) -> tuple[bool, Optional[str]]:
    """
    –®–ª—ë–º –≤–æ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ sendMessage.
    settings.feedback_bot_token –∏ settings.feedback_chat_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.
    """
    token = settings.feedback_bot_token
    chat_id = settings.feedback_chat_id
    if not token or not chat_id:
        return False, "FEEDBACK_* env not set"

    tag = {"bug": "üêû –ü—Ä–æ–±–ª–µ–º–∞", "idea": "üí° –ò–¥–µ—è", "free": "‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ"}.get(fb_type, "‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ")
    head = f"{tag} ‚Ä¢ #{feedback_id}"
    user_line = f"From: {full_name or ''} @{username or ''} (tg_id={from_user})".strip()

    payload = {
        "chat_id": str(chat_id),
        "text": f"{head}\n{user_line}\n\n{text}",
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as s:
            async with s.post(url, json=payload) as r:
                if r.status != 200:
                    return False, f"http {r.status}"
                data = await r.json()
                return bool(data.get("ok")), None
    except Exception as e:
        return False, str(e)
