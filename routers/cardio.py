
# routers/cardio.py
from __future__ import annotations

import re
from datetime import datetime
from typing import Optional, List

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from sqlmodel import select

from config import settings
from db import get_session, User, Workout, WorkoutItem, Exercise, MuscleGroup

cardio_router = Router()

# ===================== –°–æ—Å—Ç–æ—è–Ω–∏—è =====================
class Cardio(StatesGroup):
    choose_machine = State()
    input_metrics = State()

# ===================== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã =====================
SKIPPING_NAME = "–°–∫–∞–∫–∞–ª–∫–∞"  # –∫–∞—Ä–¥–∏–æ, –≥–¥–µ –≤–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
DEFAULT_CARDIO = [
    ("–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞", "treadmill"),
    ("–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂—ë—Ä", "bike"),
    ("–≠–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä", "elliptical"),
    ("–ì—Ä–µ–±–Ω–æ–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä", "rower"),
    (SKIPPING_NAME, "jump_rope"),
]

# ===================== –£—Ç–∏–ª–∏—Ç—ã –ë–î =====================
async def _get_user(tg_id: int) -> Optional[User]:
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == tg_id))
        return res.first()

async def _get_or_create_workout(tg_id: int) -> int:
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(User).where(User.tg_id == tg_id))
        user = res.first()
        if not user:
            raise RuntimeError("NO_USER")
        title = datetime.now().strftime("%Y-%m-%d %H:%M")
        w = Workout(user_id=user.id, title=title)
        session.add(w)
        await session.commit()
        await session.refresh(w)
        return w.id

async def _ensure_default_cardio():
    """–°–æ–∑–¥–∞—ë–º –∫–∞—Ä–¥–∏–æ-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–æ slug –∏ –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≥—Ä—É–ø–ø–µ 'cardio')."""
    async with await get_session(settings.database_url) as session:
        res = await session.exec(select(Exercise).where(Exercise.type == "cardio"))
        existing = res.all()
        have_slugs = {e.slug for e in existing if getattr(e, "slug", None)}

        # –Ω–∞–π–¥—ë–º id –≥—Ä—É–ø–ø—ã 'cardio' (–ø–æ slug, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –ø–æ –∏–º–µ–Ω–∏)
        mg = await session.exec(select(MuscleGroup).where(MuscleGroup.slug == "cardio"))
        group = mg.first()
        if not group:
            mg = await session.exec(select(MuscleGroup).where(MuscleGroup.name == "–ö–∞—Ä–¥–∏–æ"))
            group = mg.first()
        group_id = group.id if group else None

        to_add = []
        for name, slug in DEFAULT_CARDIO:
            if slug not in have_slugs:
                to_add.append(Exercise(name=name, slug=slug, type="cardio", primary_muscle_id=group_id))
        if to_add:
            for e in to_add:
                session.add(e)
            await session.commit()

async def _fetch_cardio_exercises(page: int = 0, per_page: int = 10):
    await _ensure_default_cardio()
    async with await get_session(settings.database_url) as session:
        base = select(Exercise).where(Exercise.type == "cardio")
        all_items = (await session.exec(base)).all()
        total = len(all_items)
        res = await session.exec(base.order_by(Exercise.name.asc()).offset(page * per_page).limit(per_page))
        items = res.all()
        return items, total

async def _count_saved(workout_id: int, exercise_id: int) -> int:
    async with await get_session(settings.database_url) as session:
        res = await session.exec(
            select(WorkoutItem).where(
                WorkoutItem.workout_id == workout_id,
                WorkoutItem.exercise_id == exercise_id,
                WorkoutItem.duration_sec != None,  # noqa: E711
            )
        )
        return len(res.all())

# ===================== –í—ë—Ä—Å—Ç–∫–∞ =====================
def _machines_kb(exercises: List[Exercise], page: int, total: int) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=ex.name, callback_data=f"cx:{ex.id}")] for ex in exercises]
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"cpage:{page-1}"))
    if (page + 1) * 10 < total:
        nav.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ¬ª", callback_data=f"cpage:{page+1}"))
    if nav:
        rows.append(nav)
    rows.append([InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞—Ä–¥–∏–æ", callback_data="cfinish")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def _cardio_card_text(ex: Exercise, duration_min: Optional[int], distance_km: Optional[float], saved: int) -> str:
    dur_txt = f"{duration_min} –º–∏–Ω" if duration_min else "‚Äî"
    dist_txt = f"{distance_km:.2f} –∫–º" if distance_km is not None else "‚Äî"
    base = (
        f"<b>{ex.name}</b> (–∫–∞—Ä–¥–∏–æ)\n"
        f"–í—Ä–µ–º—è: <b>{dur_txt}</b>\n"
        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: <b>{dist_txt}</b>\n"
        f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: <b>{saved}</b>\n\n"
    )
    if ex.name == SKIPPING_NAME:
        hint = (
            "–í–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–í—Ä–µ–º—è (–º–∏–Ω)</b>\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>10</code>, <code>15</code>, <code>25</code>\n"
            "–î–ª—è —Å–∫–∞–∫–∞–ª–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
        )
    else:
        hint = (
            "–í–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–í—Ä–µ–º—è (–º–∏–Ω), –î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)</b>\n"
            "–ü—Ä–∏–º–µ—Ä—ã: <code>30, 6.2</code>, <code>45/12</code>, <code>20 3</code>\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è: <code>25</code>."
        )
    return base + hint

def _cardio_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="csave"),
            InlineKeyboardButton(text="‚Ü© –î—Ä—É–≥–∞—è –º–∞—à–∏–Ω–∞", callback_data="cback"),
            InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cfinish"),
        ]]
    )

# ===================== –†–∞–∑–±–æ—Ä –≤–≤–æ–¥–∞ =====================
# –§–æ—Ä–º–∞—Ç: "–º–∏–Ω—É—Ç—ã[,/ –ø—Ä–æ–±–µ–ª]–∫–∏–ª–æ–º–µ—Ç—Ä—ã?" –≥–¥–µ –∫–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö, –∞ –¥–ª—è "–°–∫–∞–∫–∞–ª–∫–∞" –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.
# –ü—Ä–∏–º–µ—Ä—ã: "30", "30, 6.2", "45/12", "20 3"
INPUT_RE = re.compile(r"^\s*(?P<min>\d+(?:[.,]\d+)?)\s*(?:[,/ ]\s*(?P<km>\d+(?:[.,]\d+)?))?\s*$")

def _norm_minutes(val: str) -> int:
    # –î–æ–ø—É—Å–∫–∞–µ–º –¥—Ä–æ–±–Ω—ã–µ –º–∏–Ω—É—Ç—ã, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö
    minutes = float(val.replace(",", "."))
    return max(1, int(round(minutes)))

def _norm_km(val: Optional[str]) -> Optional[float]:
    if not val:
        return None
    return float(val.replace(",", "."))

# ===================== –ö–æ–º–∞–Ω–¥—ã/–•—ç–Ω–¥–ª–µ—Ä—ã =====================
@cardio_router.message(Command("cardio"))
@cardio_router.message(F.text == "üö¥ –ö–∞—Ä–¥–∏–æ")
async def start_cardio(msg: Message, state: FSMContext):
    user = await _get_user(msg.from_user.id)
    if not user or not all([user.gender, user.weight_kg, user.height_cm, user.age]):
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ /start –∏ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É, –Ω–µ —Å—Ç—Ä–∞–¥–∞–π.")
        return
    workout_id = await _get_or_create_workout(msg.from_user.id)
    await state.clear()
    await state.update_data(c_workout_id=workout_id, c_page=0)
    items, total = await _fetch_cardio_exercises(page=0)
    await msg.answer("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä (–∫–∞—Ä–¥–∏–æ):", reply_markup=_machines_kb(items, page=0, total=total))
    await state.set_state(Cardio.choose_machine)

@cardio_router.callback_query(F.data.startswith("cpage:"), Cardio.choose_machine)
async def cardio_page(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    page = int(cb.data.split(":", 1)[1])
    await state.update_data(c_page=page)
    items, total = await _fetch_cardio_exercises(page=page)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä (–∫–∞—Ä–¥–∏–æ):", reply_markup=_machines_kb(items, page=page, total=total))

@cardio_router.callback_query(F.data.startswith("cx:"), Cardio.choose_machine)
async def pick_machine(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    ex_id = int(cb.data.split(":", 1)[1])
    data = await state.get_data()
    workout_id = int(data["c_workout_id"])
    async with await get_session(settings.database_url) as session:
        ex = await session.get(Exercise, ex_id)
    saved = await _count_saved(workout_id, ex_id)
    await state.update_data(c_ex_id=ex_id, c_min=None, c_km=None, c_last_msg=cb.message.message_id)
    await cb.message.edit_text(
        _cardio_card_text(ex, None, None, saved),
        reply_markup=_cardio_kb(),
        parse_mode="HTML",
    )
    await state.set_state(Cardio.input_metrics)

@cardio_router.message(Cardio.input_metrics, F.text.regexp(INPUT_RE))
async def cardio_input(msg: Message, state: FSMContext):
    text = msg.text.strip()
    m = INPUT_RE.match(text)
    if not m:
        return
    minutes = _norm_minutes(m.group("min"))
    km = _norm_km(m.group("km"))

    data = await state.get_data()
    ex_id = int(data["c_ex_id"])
    workout_id = int(data["c_workout_id"])

    async with await get_session(settings.database_url) as session:
        ex = await session.get(Exercise, ex_id)

    # –î–ª—è "–°–∫–∞–∫–∞–ª–∫–∞" –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
    distance_km = None if ex.name == SKIPPING_NAME else km

    await state.update_data(c_min=minutes, c_km=distance_km)
    saved = await _count_saved(workout_id, ex_id)

    try:
        await msg.bot.edit_message_text(
            chat_id=msg.chat.id,
            message_id=int(data.get("c_last_msg") or msg.message_id),
            text=_cardio_card_text(ex, minutes, distance_km, saved),
            reply_markup=_cardio_kb(),
            parse_mode="HTML",
        )
    except TelegramBadRequest:
        await msg.answer(_cardio_card_text(ex, minutes, distance_km, saved), reply_markup=_cardio_kb())

@cardio_router.callback_query(F.data == "csave", Cardio.input_metrics)
async def cardio_save(cb: CallbackQuery, state: FSMContext):
    await cb.answer("–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶")
    data = await state.get_data()
    ex_id = int(data["c_ex_id"])
    workout_id = int(data["c_workout_id"])
    minutes = int(data.get("c_min") or 0)
    km = data.get("c_km")
    if minutes <= 0:
        await cb.message.edit_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä—ã: 10, 30, 45/12")
        return

    distance_m = int(round(float(km) * 1000)) if km is not None else None

    async with await get_session(settings.database_url) as session:
        item = WorkoutItem(
            workout_id=workout_id,
            exercise_id=ex_id,
            duration_sec=minutes * 60,
            distance_m=distance_m,
        )
        session.add(item)
        await session.commit()
        ex = await session.get(Exercise, ex_id)

    dist_txt = f"{km:.2f} –∫–º" if km is not None else "‚Äî"
    await cb.message.edit_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{ex.name}</b>\n"
        f"–í—Ä–µ–º—è: <b>{minutes} –º–∏–Ω</b> | –î–∏—Å—Ç–∞–Ω—Ü–∏—è: <b>{dist_txt}</b>\n"
        "–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä.",
        reply_markup=_cardio_kb(),
        parse_mode="HTML",
    )

@cardio_router.callback_query(F.data == "cback", Cardio.input_metrics)
async def cardio_back(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    page = int((await state.get_data()).get("c_page", 0))
    items, total = await _fetch_cardio_exercises(page=page)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä (–∫–∞—Ä–¥–∏–æ):", reply_markup=_machines_kb(items, page=page, total=total))
    await state.set_state(Cardio.choose_machine)

@cardio_router.callback_query(F.data == "cfinish")
async def cardio_finish(cb: CallbackQuery, state: FSMContext):
    await cb.answer("–ì–æ—Ç–æ–≤–æ")
    await state.clear()
    await cb.message.edit_text("–ö–∞—Ä–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò–¥–∏ –ø–µ–π –≤–æ–¥—É.")
