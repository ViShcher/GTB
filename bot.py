import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–∞ Pella –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞)
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

if not API_TOKEN:
    raise RuntimeError("–ù–µ—Ç BOT_TOKEN. –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

# –õ–æ–≥–∏ ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å—ë –≤ —Ö–æ—Å—Ç–∏–Ω–≥–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç üí™\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"
    )

@dp.message_handler(commands=["ping"])
async def cmd_ping(message: types.Message):
    await message.answer("pong üèì")

# –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Å–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–µ–±—Ö—É–∫ –∏ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∞–ø–¥–µ–π—Ç–æ–≤
async def on_startup(dp):
    logger.info("Starting up: deleting webhook & dropping pending updates...")
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("Startup completed.")

async def on_shutdown(dp):
    logger.info("Shutting down...")

if __name__ == "__main__":
    # skip_updates=False ‚Äî –º—ã —É–∂–µ –¥—Ä–æ–ø–Ω—É–ª–∏ –∏—Ö –≤ on_startup
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown, skip_updates=False)
